{"version":3,"sources":["scripts/main.js"],"names":["score","document","querySelector","button","fields","querySelectorAll","table","gameStart","classList","remove","add","textContent","scoreValue","up","numsArr","index","arr","filter","item","i","length","tile","updateScore","mergedArr","down","unshift","left","right","showMessage","TypeOfMessage","winMessage","loseMessage","startMessage","notEmptyTile","row","notMergeTile","j","k","moveHorizontally","direction","json","JSON","stringify","copyTable","parse","rowIndex","Math","floor","colIndex","tableValue","generateRandomTile","updateGameFields","moveVertically","loseCheck","indexRow","indexCol","fieldIndex","getRandonCell","firstRandomNum","random","restart","randomIndex","value","splice","addEventListener","e","key","contains"],"mappings":"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","file":"main.65c806a7.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst score = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\nconst fields = document.querySelectorAll('.field-cell');\n\nconst table = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction gameStart() {\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.textContent = 'restart';\n}\n\nlet scoreValue = 0;\n\nfunction up(numsArr, index) {\n  const arr = numsArr.filter(item => item !== 0);\n\n  for (let i = 0; i < arr.length - 1; i++) {\n    const tile = arr[i];\n    const nextTile = arr[i + 1];\n\n    if (tile === nextTile) {\n      arr[i] = tile * 2;\n      scoreValue += arr[i];\n      updateScore();\n      arr[i + 1] = 0;\n    }\n  }\n\n  const mergedArr = arr.filter(item => item !== 0);\n\n  for (let i = 0; i < table.length; i++) {\n    table[i][index] = mergedArr[i] || 0;\n  }\n}\n\nfunction down(numsArr, index) {\n  const arr = numsArr.filter(item => item !== 0);\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    const tile = arr[i];\n    const nextTile = arr[i - 1];\n\n    if (tile === nextTile) {\n      arr[i] = tile * 2;\n      scoreValue += arr[i];\n      updateScore();\n      arr[i - 1] = 0;\n    }\n  }\n\n  const mergedArr = arr.filter(item => item !== 0);\n\n  while (mergedArr.length < 4) {\n    mergedArr.unshift(0);\n  }\n\n  for (let i = 0; i < table.length; i++) {\n    table[i][index] = mergedArr[i] || 0;\n  }\n}\n\nfunction left(numsArr) {\n  const arr = numsArr.filter(item => item !== 0);\n\n  for (let i = 0; i < arr.length - 1; i++) {\n    const tile = arr[i];\n    const nextTile = arr[i + 1];\n\n    if (tile === nextTile) {\n      arr[i] = tile * 2;\n      scoreValue += arr[i];\n      updateScore();\n      arr[i + 1] = 0;\n    }\n  }\n\n  const mergedArr = arr.filter(item => item !== 0);\n\n  for (let i = 0; i < table.length; i++) {\n    numsArr[i] = mergedArr[i] || 0;\n  }\n}\n\nfunction right(numsArr) {\n  const arr = numsArr.filter(item => item !== 0);\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    const tile = arr[i];\n    const nextTile = arr[i - 1];\n\n    if (tile === nextTile) {\n      arr[i] = tile * 2;\n      scoreValue += arr[i];\n      updateScore();\n      arr[i - 1] = 0;\n    }\n  }\n\n  const mergedArr = arr.filter(item => item !== 0);\n\n  while (mergedArr.length < 4) {\n    mergedArr.unshift(0);\n  }\n\n  for (let i = 0; i < table.length; i++) {\n    numsArr[i] = mergedArr[i] || 0;\n  }\n}\n\nfunction showMessage(TypeOfMessage) {\n  const winMessage = document.querySelector('.message-win');\n  const loseMessage = document.querySelector('.message-lose');\n  const startMessage = document.querySelector('.message-start');\n\n  switch (TypeOfMessage) {\n    case 'win':\n      winMessage.classList.remove('hidden');\n      loseMessage.classList.add('hidden');\n      startMessage.classList.add('hidden');\n      break;\n    case 'lose':\n      winMessage.classList.add('hidden');\n      loseMessage.classList.remove('hidden');\n      startMessage.classList.add('hidden');\n      break;\n    case 'start':\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n      startMessage.classList.remove('hidden');\n      break;\n    case 'nothing':\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n      startMessage.classList.add('hidden');\n      break;\n    default:\n      return 0;\n  }\n}\n\nfunction notEmptyTile() {\n  for (const row of table) {\n    for (const tile of row) {\n      if (tile === 0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction notMergeTile() {\n  for (const row of table) {\n    for (let i = 0; i < row.length; i++) {\n      const tile = row[i];\n      const nextTile = row[i + 1];\n\n      if (tile === nextTile) {\n        return false;\n      }\n    }\n  }\n\n  for (let j = 0; j < 4; j++) {\n    for (let k = 0; k < 3; k++) {\n      const tile = table[k][j];\n      const nextRowTile = table[k + 1][j];\n\n      if (tile === nextRowTile) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction moveHorizontally(direction) {\n  const json = JSON.stringify(table);\n  const copyTable = JSON.parse(json);\n\n  for (const row of table) {\n    direction(row);\n  }\n\n  for (let i = 0; i < 16; i++) {\n    const rowIndex = Math.floor(i / 4);\n    const colIndex = i - (rowIndex * 4);\n    const tableValue = table[rowIndex][colIndex];\n    const copyTableValue = copyTable[rowIndex][colIndex];\n\n    if (tableValue !== copyTableValue) {\n      generateRandomTile();\n      updateGameFields();\n      break;\n    }\n  }\n}\n\nfunction moveVertically(direction) {\n  const json = JSON.stringify(table);\n  const copyTable = JSON.parse(json);\n\n  for (let j = 0; j < 4; j++) {\n    direction(\n      [table[0][j], table[1][j], table[2][j], table[3][j]], j\n    );\n  }\n\n  for (let i = 0; i < 16; i++) {\n    const rowIndex = Math.floor(i / 4);\n    const colIndex = i - (rowIndex * 4);\n    const tableValue = table[rowIndex][colIndex];\n    const copyTableValue = copyTable[rowIndex][colIndex];\n\n    if (tableValue !== copyTableValue) {\n      generateRandomTile();\n      updateGameFields();\n      break;\n    }\n  }\n}\n\ndocument.addEventListener('keydown', e => {\n  switch (e.key) {\n    case 'a': {\n      moveHorizontally(left);\n      break;\n    }\n\n    case 'ArrowLeft': {\n      moveHorizontally(left);\n      break;\n    }\n\n    case 'd': {\n      moveHorizontally(right);\n      break;\n    }\n\n    case 'ArrowRight': {\n      moveHorizontally(right);\n      break;\n    }\n\n    case 'w': {\n      moveVertically(up);\n      break;\n    }\n\n    case 'ArrowUp': {\n      moveVertically(up);\n      break;\n    }\n\n    case 's': {\n      moveVertically(down);\n      break;\n    }\n\n    case 'ArrowDown': {\n      moveVertically(down);\n      break;\n    }\n  }\n  loseCheck();\n});\n\nfunction loseCheck() {\n  if (notEmptyTile()) {\n    if (notMergeTile()) {\n      showMessage('lose');\n    }\n  }\n}\n\nfunction updateGameFields() {\n  for (let i = 0; i < fields.length; i++) {\n    const indexRow = Math.floor(i / 4);\n    const indexCol = i - (indexRow * 4);\n    const tableValue = table[indexRow][indexCol];\n\n    fields[i].textContent = tableValue;\n    fields[i].classList = ['field-cell'];\n\n    if (tableValue !== 0) {\n      fields[i].classList.add(`field-cell--${tableValue}`);\n    }\n  }\n}\n\nfunction updateScore() {\n  score.textContent = scoreValue;\n\n  for (const row of table) {\n    for (const item of row) {\n      if (item === 2048) {\n        showMessage('win');\n      }\n    }\n  }\n}\n\nfunction generateRandomTile() {\n  const fieldIndex = getRandonCell();\n  const rowIndex = Math.floor(fieldIndex / 4);\n  const colIndex = fieldIndex - (rowIndex * 4);\n  const firstRandomNum = Math.floor(Math.random() * 10);\n\n  if (firstRandomNum === 4) {\n    table[rowIndex][colIndex] = 4;\n  } else {\n    table[rowIndex][colIndex] = 2;\n  }\n}\n\nfunction restart() {\n  for (let i = 0; i < table.length; i++) {\n    table[i] = [0, 0, 0, 0];\n  }\n\n  scoreValue = 0;\n  updateScore();\n}\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    gameStart();\n  }\n  restart();\n  updateGameFields();\n  generateRandomTile();\n  updateGameFields();\n  generateRandomTile();\n  updateGameFields();\n  showMessage('nothing');\n});\n\nfunction getRandonCell() {\n  const arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\n  for (let i = 15; i >= 0; i--) {\n    const randomIndex = Math.floor(Math.random() * i);\n    const value = arr[randomIndex];\n    const indexRow = Math.floor(value / 4);\n    const indexCol = value - (indexRow * 4);\n\n    if (table[indexRow][indexCol] === 0) {\n      return value;\n    } else {\n      arr.splice(randomIndex, 1);\n    }\n  }\n}\n"]}